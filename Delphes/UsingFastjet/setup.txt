in kisti (slc6)
++++++++++++++++++++++++++++++++++++++++++
~/.bashrc
function fastjet_setup()
{
  source /cvmfs/cms.cern.ch/cmsset_default.sh
  export SCRAM_ARCH=slc6_amd64_gcc491
  cd /cms/home/youngjo/CMSSW/CMSSW_7_3_6/src
  eval `scramv1 runtime -sh`
  source /cvmfs/cms.cern.ch/slc6_amd64_gcc491/lcg/root//6.02.00/bin/thisroot.sh
  #cd /cms/home/youngjo/newMadgraph/ROOT/ROOT6/fastjet/test/
}
++++++++++++++++++++++++++++++++++++++++++
> fastjet_setup
> cd /cms/home/youngjo/newMadgraph/ROOT/ROOT6/fastjet
> tar zxvf fastjet-3.1.2.tar.gz
> cd fastjet-3.1.2
> ./configure --prefix=$PWD/../fastjet-install
> make -j 4
> make check
> make install
> cd /cms/home/youngjo/newMadgraph/ROOT/ROOT6/fastjet/test/
> vi .rootlogon.C
{
  gSystem->Load("/cms/home/youngjo/newMadgraph/ROOT/ROOT6/fastjet/fastjet-install/lib/libfastjet.so");
  gSystem->Load("/cms/home/youngjo/newMadgraph/ROOT/ROOT6/fastjet/fastjet-install/lib/libfastjetplugins.so");
  gSystem->AddIncludePath("-I/cms/home/youngjo/newMadgraph/ROOT/ROOT6/fastjet/fastjet-install/include");
}
++++++++++++++++++++++++++++++++++++++++++
test.C
++++++++
#include "fastjet/ClusterSequence.hh"
#include <iostream>
using namespace fastjet;
using namespace std;

int test() {

  vector<PseudoJet> particles;
  // an event with three particles:   px    py  pz      E
  particles.push_back( PseudoJet(   99.0,  0.1,  0, 100.0) );
  particles.push_back( PseudoJet(    4.0, -0.1,  0,   5.0) );
  particles.push_back( PseudoJet(  -99.0,    0,  0,  99.0) );

  // choose a jet definition
  double R = 0.7;
  JetDefinition jet_def(antikt_algorithm, R);

  // run the clustering, extract the jets
  ClusterSequence cs(particles, jet_def);
  vector<PseudoJet> jets = sorted_by_pt(cs.inclusive_jets());

  // print out some infos
  cout << "Clustering with " << jet_def.description() << endl;

  // print the jets
  cout <<   "        pt y phi" << endl;
  for (unsigned i = 0; i < jets.size(); i++) {
    cout << "jet " << i << ": "<< jets[i].pt() << " "
                   << jets[i].rap() << " " << jets[i].phi() << endl;
    vector<PseudoJet> constituents = jets[i].constituents();
    for (unsigned j = 0; j < constituents.size(); j++) {
      cout << "    constituent " << j << "'s pt: " << constituents[j].pt()
           << endl;
    }
  }

}
+++++++++++++++++++++++++++++++++++++++++++
> root -b 
root [0] .L test.C+
root [1] test()
#--------------------------------------------------------------------------
#                         FastJet release 3.1.2
#                 M. Cacciari, G.P. Salam and G. Soyez
#     A software package for jet finding and analysis at colliders
#                           http://fastjet.fr
#
# Please cite EPJC72(2012)1896 [arXiv:1111.6097] if you use this package
# for scientific work and optionally PLB641(2006)57 [hep-ph/0512210].
#
# FastJet is provided without warranty under the terms of the GNU GPLv2.
# It uses T. Chan's closest pair algorithm, S. Fortune's Voronoi code
# and 3rd party plugin jet algorithms. See COPYING file for details.
#--------------------------------------------------------------------------
Clustering with Longitudinally invariant anti-kt algorithm with R = 0.7 and E scheme recombination
        pt y phi
jet 0: 103 0 0
    constituent 0's pt: 99.0001
    constituent 1's pt: 4.00125
jet 1: 99 0 3.14159
    constituent 0's pt: 99
(int) 0
root [2] .q
++++++++++++++++++++++++++++++++
